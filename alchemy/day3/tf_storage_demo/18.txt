mkdir tf_azure_storage_demo
cd tf_azure_storage_demo


saravanans@skillsasap-vm24:~/tf_azure_storage_demo$
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ cat main.tf
resource "random_string" "rgsuffix" {
  length  = 5
  special = false
  upper   = false
}

resource "azurerm_resource_group" "demorg" {
  name = "rgstorage${random_string.rgsuffix.result}"
  location = var.location
}

saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ cat providers.tf
provider "azurerm" {
  features {}
}
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ cat variables.tf
variable "location" {
	description = "mention the location"
	default = "eastus"
}

variable "rgsuffix" {
	description = "suffix for rg"
	default = "fromDefault"
}

saravanans@skillsasap-vm24:~/tf_azure_storage_demo$
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/azurerm...
- Finding latest version of hashicorp/random...
- Installing hashicorp/azurerm v3.73.0...
- Installed hashicorp/azurerm v3.73.0 (signed by HashiCorp)
- Installing hashicorp/random v3.5.1...
- Installed hashicorp/random v3.5.1 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ terraform apply

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_resource_group.demorg will be created
  + resource "azurerm_resource_group" "demorg" {
      + id       = (known after apply)
      + location = "eastus"
      + name     = (known after apply)
    }

  # random_string.rgsuffix will be created
  + resource "random_string" "rgsuffix" {
      + id          = (known after apply)
      + length      = 5
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_string.rgsuffix: Creating...
random_string.rgsuffix: Creation complete after 0s [id=9ks8r]
azurerm_resource_group.demorg: Creating...
azurerm_resource_group.demorg: Creation complete after 0s [id=/subscriptions/d9bd5677-040c-4455-a75e-5830c2c503f9/resourceGroups/rgstorage9ks8r]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$

saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ nano storage.tf
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ cat storage.tf
resource "random_string" "storageSuffix" {
  length  = 6
  special = false
  upper   = false
}


resource "azurerm_storage_account" "storagedemo" {
  name                     = "mystorage${random_string.storageSuffix.result}"
  resource_group_name      = azurerm_resource_group.demorg.name
  location                 = var.location

  account_tier             = "Standard"
  account_replication_type = "LRS"

  tags = {
    environment = "robochefweb"
  }
}


saravanans@skillsasap-vm24:~/tf_azure_storage_demo$
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ terraform apply
random_string.rgsuffix: Refreshing state... [id=9ks8r]
azurerm_resource_group.demorg: Refreshing state... [id=/subscriptions/d9bd5677-040c-4455-a75e-5830c2c503f9/resourceGroups/rgstorage9ks8r]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_storage_account.storagedemo will be created
  + resource "azurerm_storage_account" "storagedemo" {
      + access_tier                       = (known after apply)
      + account_kind                      = "StorageV2"
      + account_replication_type          = "LRS"
      + account_tier                      = "Standard"
      + allow_nested_items_to_be_public   = true
      + cross_tenant_replication_enabled  = true
      + default_to_oauth_authentication   = false
      + enable_https_traffic_only         = true
      + id                                = (known after apply)
      + infrastructure_encryption_enabled = false
      + is_hns_enabled                    = false
      + large_file_share_enabled          = (known after apply)
      + location                          = "eastus"
      + min_tls_version                   = "TLS1_2"
      + name                              = (known after apply)
      + nfsv3_enabled                     = false
      + primary_access_key                = (sensitive value)
      + primary_blob_connection_string    = (sensitive value)
      + primary_blob_endpoint             = (known after apply)
      + primary_blob_host                 = (known after apply)
      + primary_connection_string         = (sensitive value)
      + primary_dfs_endpoint              = (known after apply)
      + primary_dfs_host                  = (known after apply)
      + primary_file_endpoint             = (known after apply)
      + primary_file_host                 = (known after apply)
      + primary_location                  = (known after apply)
      + primary_queue_endpoint            = (known after apply)
      + primary_queue_host                = (known after apply)
      + primary_table_endpoint            = (known after apply)
      + primary_table_host                = (known after apply)
      + primary_web_endpoint              = (known after apply)
      + primary_web_host                  = (known after apply)
      + public_network_access_enabled     = true
      + queue_encryption_key_type         = "Service"
      + resource_group_name               = "rgstorage9ks8r"
      + secondary_access_key              = (sensitive value)
      + secondary_blob_connection_string  = (sensitive value)
      + secondary_blob_endpoint           = (known after apply)
      + secondary_blob_host               = (known after apply)
      + secondary_connection_string       = (sensitive value)
      + secondary_dfs_endpoint            = (known after apply)
      + secondary_dfs_host                = (known after apply)
      + secondary_file_endpoint           = (known after apply)
      + secondary_file_host               = (known after apply)
      + secondary_location                = (known after apply)
      + secondary_queue_endpoint          = (known after apply)
      + secondary_queue_host              = (known after apply)
      + secondary_table_endpoint          = (known after apply)
      + secondary_table_host              = (known after apply)
      + secondary_web_endpoint            = (known after apply)
      + secondary_web_host                = (known after apply)
      + sftp_enabled                      = false
      + shared_access_key_enabled         = true
      + table_encryption_key_type         = "Service"
      + tags                              = {
          + "environment" = "robochefweb"
        }
    }

  # random_string.storageSuffix will be created
  + resource "random_string" "storageSuffix" {
      + id          = (known after apply)
      + length      = 6
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_string.storageSuffix: Creating...
random_string.storageSuffix: Creation complete after 0s [id=l6d1nb]
azurerm_storage_account.storagedemo: Creating...
azurerm_storage_account.storagedemo: Still creating... [10s elapsed]
azurerm_storage_account.storagedemo: Still creating... [20s elapsed]
azurerm_storage_account.storagedemo: Creation complete after 20s [id=/subscriptions/d9bd5677-040c-4455-a75e-5830c2c503f9/resourceGroups/rgstorage9ks8r/providers/Microsoft.Storage/storageAccounts/mystoragel6d1nb]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ nano storage.tf
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ cat storage.tf
resource "random_string" "storageSuffix" {
  length  = 6
  special = false
  upper   = false
}


resource "azurerm_storage_account" "storagedemo" {
  name                     = "mystorage${random_string.storageSuffix.result}"
  resource_group_name      = azurerm_resource_group.demorg.name
  location                 = var.location

  account_tier             = "Standard"
  account_replication_type = "LRS"

  tags = {
    environment = "robochefweb"
  }
}

resource "azurerm_storage_container" "demoscontainer" {
  name = "myscontainer2023${random_string.storageSuffix.result}"
  storage_account_name  = azurerm_storage_account.storagedemo.name
  container_access_type = "private"
}


saravanans@skillsasap-vm24:~/tf_azure_storage_demo$
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ terraform apply
random_string.rgsuffix: Refreshing state... [id=9ks8r]
random_string.storageSuffix: Refreshing state... [id=l6d1nb]
azurerm_resource_group.demorg: Refreshing state... [id=/subscriptions/d9bd5677-040c-4455-a75e-5830c2c503f9/resourceGroups/rgstorage9ks8r]
azurerm_storage_account.storagedemo: Refreshing state... [id=/subscriptions/d9bd5677-040c-4455-a75e-5830c2c503f9/resourceGroups/rgstorage9ks8r/providers/Microsoft.Storage/storageAccounts/mystoragel6d1nb]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_storage_container.demoscontainer will be created
  + resource "azurerm_storage_container" "demoscontainer" {
      + container_access_type   = "private"
      + has_immutability_policy = (known after apply)
      + has_legal_hold          = (known after apply)
      + id                      = (known after apply)
      + metadata                = (known after apply)
      + name                    = "myscontainer2023l6d1nb"
      + resource_manager_id     = (known after apply)
      + storage_account_name    = "mystoragel6d1nb"
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

azurerm_storage_container.demoscontainer: Creating...
azurerm_storage_container.demoscontainer: Creation complete after 0s [id=https://mystoragel6d1nb.blob.core.windows.net/myscontainer2023l6d1nb]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$ terraform state list
azurerm_resource_group.demorg
azurerm_storage_account.storagedemo
azurerm_storage_container.demoscontainer
random_string.rgsuffix
random_string.storageSuffix
saravanans@skillsasap-vm24:~/tf_azure_storage_demo$




