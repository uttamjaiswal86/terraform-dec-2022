saravanans@skillsasap-vm24:~$ ls
tf_local_demo  tf_rand_demo2  tf_random_demo
saravanans@skillsasap-vm24:~$ mkdir tf_output_demo
saravanans@skillsasap-vm24:~$ cd .
saravanans@skillsasap-vm24:~$ cd tf_output_demo/
saravanans@skillsasap-vm24:~/tf_output_demo$ nano main.tf
saravanans@skillsasap-vm24:~/tf_output_demo$ nano main.tf
saravanans@skillsasap-vm24:~/tf_output_demo$ cat main.tf
resource "random_string" "mydata" {
   length = "9"
   special = false
}


saravanans@skillsasap-vm24:~/tf_output_demo$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/random...
- Installing hashicorp/random v3.5.1...
- Installed hashicorp/random v3.5.1 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
saravanans@skillsasap-vm24:~/tf_output_demo$ terraform apply

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # random_string.mydata will be created
  + resource "random_string" "mydata" {
      + id          = (known after apply)
      + length      = 9
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (known after apply)
      + special     = false
      + upper       = true
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_string.mydata: Creating...
random_string.mydata: Creation complete after 0s [id=0HSG305Da]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
saravanans@skillsasap-vm24:~/tf_output_demo$ nano main.tf

saravanans@skillsasap-vm24:~/tf_output_demo$ cat main.tf
resource "random_string" "mydata" {
   length = "9"
   special = false
}


output "endmsg" {
  value = random_string.mydata.result
}
saravanans@skillsasap-vm24:~/tf_output_demo$ terraform apply
random_string.mydata: Refreshing state... [id=0HSG305Da]

Changes to Outputs:
  + endmsg = "0HSG305Da"

You can apply this plan to save these new output values to the Terraform state,
without changing any real infrastructure.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes


Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

endmsg = "0HSG305Da"
saravanans@skillsasap-vm24:~/tf_output_demo$
saravanans@skillsasap-vm24:~/tf_output_demo$ nano  main.tf
saravanans@skillsasap-vm24:~/tf_output_demo$ cat main.tf
resource "random_string" "mydata" {
   length = "9"
   special = false
}


output "endmsg" {
  value = random_string.mydata.result
}

output "d2" {
  value = "Random String with Length: ${random_string.mydata.length} and Value: ${random_string.mydata.result}
}
saravanans@skillsasap-vm24:~/tf_output_demo$ terraform apply
╷
│ Error: Invalid multi-line string
│
│   on main.tf line 12, in output "d2":
│   12:   value = "Random String with Length: ${random_string.mydata.length} and Value: ${random_string.mydata.result}
│   13: }
│
│ Quoted strings may not be split over multiple lines. To produce a multi-line
│ string, either use the \n escape to represent a newline character or use the
│ "heredoc" multi-line template syntax.
╵
╷
│ Error: Unterminated template string
│
│   on main.tf line 12, in output "d2":
│   12:   value = "Random String with Length: ${random_string.mydata.length} and Value: ${random_string.mydata.result}
│   13: }
│
│ No closing marker was found for the string.
╵
╷
│ Error: Invalid multi-line string
│
│   on main.tf line 13, in output "d2":
│   13: }
│
│ Quoted strings may not be split over multiple lines. To produce a multi-line
│ string, either use the \n escape to represent a newline character or use the
│ "heredoc" multi-line template syntax.
╵
saravanans@skillsasap-vm24:~/tf_output_demo$ nano main.tf
saravanans@skillsasap-vm24:~/tf_output_demo$ cat main.tf
resource "random_string" "mydata" {
   length = "9"
   special = false
}


output "endmsg" {
  value = random_string.mydata.result
}

output "d2" {
  value = "Random String with Length: ${random_string.mydata.length} and Value: ${random_string.mydata.result}"
}
saravanans@skillsasap-vm24:~/tf_output_demo$ terraform apply
random_string.mydata: Refreshing state... [id=0HSG305Da]

Changes to Outputs:
  + d2     = "Random String with Length: 9 and Value: 0HSG305Da"

You can apply this plan to save these new output values to the Terraform state,
without changing any real infrastructure.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes


Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

d2 = "Random String with Length: 9 and Value: 0HSG305Da"
endmsg = "0HSG305Da"
saravanans@skillsasap-vm24:~/tf_output_demo$
saravanans@skillsasap-vm24:~/tf_output_demo$ terraform output
d2 = "Random String with Length: 9 and Value: 0HSG305Da"
endmsg = "0HSG305Da"
saravanans@skillsasap-vm24:~/tf_output_demo$
saravanans@skillsasap-vm24:~/tf_output_demo$
saravanans@skillsasap-vm24:~/tf_output_demo$ cat main.tf
resource "random_string" "mydata" {
   length = "9"
   special = false
}


output "endmsg" {
  value = random_string.mydata.result
}

output "d2" {
  value = "Random String with Length: ${random_string.mydata.length} and Value: ${random_string.mydata.result}"
}
saravanans@skillsasap-vm24:~/tf_output_demo$