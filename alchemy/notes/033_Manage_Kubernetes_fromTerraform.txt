saravanans@skillsasap-vm:~$ kubectl get po
NAME                                      READY   STATUS    RESTARTS   AGE
robochefweb-deployment-5dddb59c56-49kkm   1/1     Running   0          63m
robochefweb-deployment-5dddb59c56-cz4c8   1/1     Running   0          63m
robochefweb-deployment-5dddb59c56-f9r9s   1/1     Running   0          63m
robochefweb-deployment-5dddb59c56-fgrjf   1/1     Running   0          63m
robochefweb-deployment-5dddb59c56-sgkbh   1/1     Running   0          62m
webpod                                    1/1     Running   0          120m
webpod2                                   1/1     Running   0          113m
saravanans@skillsasap-vm:~$ kubectl get deploy
NAME                     READY   UP-TO-DATE   AVAILABLE   AGE
robochefweb-deployment   5/5     5            5           63m
saravanans@skillsasap-vm:~$ kubectl delete deployment robochefweb-deployment
deployment.apps "robochefweb-deployment" deleted
saravanans@skillsasap-vm:~$ kubectl get deploy
No resources found in default namespace.
saravanans@skillsasap-vm:~$ kubectl get svc
NAME                     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
kubernetes               ClusterIP   10.0.0.1       <none>        443/TCP   3h58m
robochefweb-deployment   ClusterIP   10.0.234.250   <none>        80/TCP    59m
saravanans@skillsasap-vm:~$ kubectl delete svc robochefweb-deployment
service "robochefweb-deployment" deleted
saravanans@skillsasap-vm:~$ kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.0.0.1     <none>        443/TCP   3h58m
saravanans@skillsasap-vm:~$ kubectl get deploy
No resources found in default namespace.
saravanans@skillsasap-vm:~$ kubectl get po
NAME      READY   STATUS    RESTARTS   AGE
webpod    1/1     Running   0          121m
webpod2   1/1     Running   0          114m
saravanans@skillsasap-vm:~$

saravanans@skillsasap-vm:~$ mkdir tf_k8s_provider
saravanans@skillsasap-vm:~$ cd tf_k8s_provider
saravanans@skillsasap-vm:~/tf_k8s_provider$ ls
saravanans@skillsasap-vm:~/tf_k8s_provider$ vi main.tf
saravanans@skillsasap-vm:~/tf_k8s_provider$ cat main.tf
provider "kubernetes" {
	config_path = "~/.kube/config"
}

resource "kubernetes_pod" "admaticpod" {
	metadata {
		name = "admatic-new-aks-pod"
	}

	spec {
		container {
		  image = "nginx"
		  name = "web"
		  port {
			container_port = 80
		  }
		}
	}


}

saravanans@skillsasap-vm:~/tf_k8s_provider$ kubectl get po
NAME      READY   STATUS    RESTARTS   AGE
webpod    1/1     Running   0          122m
webpod2   1/1     Running   0          116m
saravanans@skillsasap-vm:~/tf_k8s_provider$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/kubernetes...
- Installing hashicorp/kubernetes v2.23.0...
- Installed hashicorp/kubernetes v2.23.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
saravanans@skillsasap-vm:~/tf_k8s_provider$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # kubernetes_pod.admaticpod will be created
  + resource "kubernetes_pod" "admaticpod" {
      + id = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "admatic-new-aks-pod"
          + namespace        = "default"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + automount_service_account_token  = true
          + dns_policy                       = "ClusterFirst"
          + enable_service_links             = true
          + host_ipc                         = false
          + host_network                     = false
          + host_pid                         = false
          + hostname                         = (known after apply)
          + node_name                        = (known after apply)
          + restart_policy                   = "Always"
          + scheduler_name                   = (known after apply)
          + service_account_name             = (known after apply)
          + share_process_namespace          = false
          + termination_grace_period_seconds = 30

          + container {
              + image                      = "nginx"
              + image_pull_policy          = (known after apply)
              + name                       = "web"
              + stdin                      = false
              + stdin_once                 = false
              + termination_message_path   = "/dev/termination-log"
              + termination_message_policy = (known after apply)
              + tty                        = false

              + port {
                  + container_port = 80
                  + protocol       = "TCP"
                }
            }
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

kubernetes_pod.admaticpod: Creating...
kubernetes_pod.admaticpod: Creation complete after 3s [id=default/admatic-new-aks-pod]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
saravanans@skillsasap-vm:~/tf_k8s_provider$ kubectl get po
NAME                  READY   STATUS    RESTARTS   AGE
admatic-new-aks-pod   1/1     Running   0          7s
webpod                1/1     Running   0          124m
webpod2               1/1     Running   0          117m
saravanans@skillsasap-vm:~/tf_k8s_provider$ terraform destroy
kubernetes_pod.admaticpod: Refreshing state... [id=default/admatic-new-aks-pod]

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # kubernetes_pod.admaticpod will be destroyed
  - resource "kubernetes_pod" "admaticpod" {
      - id = "default/admatic-new-aks-pod" -> null

      - metadata {
          - annotations      = {} -> null
          - generation       = 0 -> null
          - labels           = {} -> null
          - name             = "admatic-new-aks-pod" -> null
          - namespace        = "default" -> null
          - resource_version = "57689" -> null
          - uid              = "0e38883c-4957-4aa8-b78e-c251265ee16f" -> null
        }

      - spec {
          - active_deadline_seconds          = 0 -> null
          - automount_service_account_token  = true -> null
          - dns_policy                       = "ClusterFirst" -> null
          - enable_service_links             = true -> null
          - host_ipc                         = false -> null
          - host_network                     = false -> null
          - host_pid                         = false -> null
          - node_name                        = "aks-default-11926793-vmss000000" -> null
          - node_selector                    = {} -> null
          - restart_policy                   = "Always" -> null
          - scheduler_name                   = "default-scheduler" -> null
          - service_account_name             = "default" -> null
          - share_process_namespace          = false -> null
          - termination_grace_period_seconds = 30 -> null

          - container {
              - args                       = [] -> null
              - command                    = [] -> null
              - image                      = "nginx" -> null
              - image_pull_policy          = "Always" -> null
              - name                       = "web" -> null
              - stdin                      = false -> null
              - stdin_once                 = false -> null
              - termination_message_path   = "/dev/termination-log" -> null
              - termination_message_policy = "File" -> null
              - tty                        = false -> null

              - port {
                  - container_port = 80 -> null
                  - host_port      = 0 -> null
                  - protocol       = "TCP" -> null
                }

              - resources {
                  - limits   = {} -> null
                  - requests = {} -> null
                }
            }
        }
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

kubernetes_pod.admaticpod: Destroying... [id=default/admatic-new-aks-pod]
kubernetes_pod.admaticpod: Destruction complete after 2s

Destroy complete! Resources: 1 destroyed.
saravanans@skillsasap-vm:~/tf_k8s_provider$ kubectl get po
NAME      READY   STATUS    RESTARTS   AGE
webpod    1/1     Running   0          124m
webpod2   1/1     Running   0          118m
saravanans@skillsasap-vm:~/tf_k8s_provider$

saravanans@skillsasap-vm:~/tf_k8s_provider$ kubectl get po
NAME      READY   STATUS    RESTARTS   AGE
webpod    1/1     Running   0          124m
webpod2   1/1     Running   0          118m
saravanans@skillsasap-vm:~/tf_k8s_provider$
saravanans@skillsasap-vm:~/tf_k8s_provider$ vi main.tf
saravanans@skillsasap-vm:~/tf_k8s_provider$ cat main.tf
provider "kubernetes" {
	config_path = "~/.kube/config"
}

resource "kubernetes_pod" "admaticpod" {
	metadata {
		name = "admatic-new-aks-pod"
	}

	spec {
		container {
		  image = "nginx"
		  name = "web"
		  port {
			container_port = 80
		  }
		}
	}


}

resource "kubernetes_deployment" "nginx" {
  metadata {
    name = "scalable-nginx-example"
    labels = {
      App = "ScalableNginxExample"
    }
  }

  spec {
    replicas = 6
    selector {
      match_labels = {
        App = "ScalableNginxExample"
      }
    }
    template {
      metadata {
        labels = {
          App = "ScalableNginxExample"
        }
      }
      spec {
        container {
          image = "nginx:1.7.8"
          name  = "example"

          port {
            container_port = 80
          }

        }
      }
    }
  }
}

saravanans@skillsasap-vm:~/tf_k8s_provider$ terraform apply


Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

kubernetes_deployment.nginx: Creating...
kubernetes_pod.admaticpod: Creating...
kubernetes_pod.admaticpod: Creation complete after 4s [id=default/admatic-new-aks-pod]
kubernetes_deployment.nginx: Still creating... [10s elapsed]
kubernetes_deployment.nginx: Creation complete after 16s [id=default/scalable-nginx-example]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
saravanans@skillsasap-vm:~/tf_k8s_provider$

saravanans@skillsasap-vm:~/tf_k8s_provider$ cat main.tf
provider "kubernetes" {
	config_path = "~/.kube/config"
}

resource "kubernetes_pod" "admaticpod" {
	metadata {
		name = "admatic-new-aks-pod"
	}

	spec {
		container {
		  image = "nginx"
		  name = "web"
		  port {
			container_port = 80
		  }
		}
	}


}

resource "kubernetes_deployment" "nginx" {
  metadata {
    name = "scalable-nginx-example"
    labels = {
      App = "ScalableNginxExample"
    }
  }

  spec {
    replicas = 6
    selector {
      match_labels = {
        App = "ScalableNginxExample"
      }
    }
    template {
      metadata {
        labels = {
          App = "ScalableNginxExample"
        }
      }
      spec {
        container {
          image = "nginx:1.7.8"
          name  = "example"

          port {
            container_port = 80
          }

        }
      }
    }
  }
}

resource "kubernetes_service" "nginx" {
  metadata {
    name = "nginx-example"
  }
  spec {
    selector = {
      App = "ScalableNginxExample"
    }
    port {
      port        = 80
      target_port = 80
    }

    type = "ClusterIP"
  }
}



















saravanans@skillsasap-vm:~/tf_k8s_provider$ vi main.tf
saravanans@skillsasap-vm:~/tf_k8s_provider$ kubectl get svc
NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
kubernetes      ClusterIP   10.0.0.1       <none>        443/TCP   4h15m
nginx-example   ClusterIP   10.0.187.150   <none>        80/TCP    85s
saravanans@skillsasap-vm:~/tf_k8s_provider$ terraform apply
kubernetes_service.nginx: Refreshing state... [id=default/nginx-example]
kubernetes_deployment.nginx: Refreshing state... [id=default/scalable-nginx-example]
kubernetes_pod.admaticpod: Refreshing state... [id=default/admatic-new-aks-pod]

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  ~ update in-place

Terraform will perform the following actions:

  # kubernetes_service.nginx will be updated in-place
  ~ resource "kubernetes_service" "nginx" {
        id                     = "default/nginx-example"
        # (2 unchanged attributes hidden)

      ~ spec {
          ~ type                              = "ClusterIP" -> "LoadBalancer"
            # (12 unchanged attributes hidden)

            # (1 unchanged block hidden)
        }

        # (1 unchanged block hidden)
    }

Plan: 0 to add, 1 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

kubernetes_service.nginx: Modifying... [id=default/nginx-example]
kubernetes_service.nginx: Modifications complete after 0s [id=default/nginx-example]

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.
saravanans@skillsasap-vm:~/tf_k8s_provider$ kubectl get svc
NAME            TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
kubernetes      ClusterIP      10.0.0.1       <none>        443/TCP        4h16m
nginx-example   LoadBalancer   10.0.187.150   <pending>     80:32661/TCP   106s
saravanans@skillsasap-vm:~/tf_k8s_provider$ kubectl get svc
NAME            TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)        AGE
kubernetes      ClusterIP      10.0.0.1       <none>          443/TCP        4h16m
nginx-example   LoadBalancer   10.0.187.150   168.61.72.212   80:32661/TCP   116s
saravanans@skillsasap-vm:~/tf_k8s_provider$ curl 168.61.72.212
^C
saravanans@skillsasap-vm:~/tf_k8s_provider$ curl 168.61.72.212
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
saravanans@skillsasap-vm:~/tf_k8s_provider$ curl 168.61.72.212
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
saravanans@skillsasap-vm:~/tf_k8s_provider$

saravanans@skillsasap-vm:~/tf_k8s_provider$ cat main.tf
provider "kubernetes" {
	config_path = "~/.kube/config"
}

resource "kubernetes_pod" "admaticpod" {
	metadata {
		name = "admatic-new-aks-pod"
	}

	spec {
		container {
		  image = "nginx"
		  name = "web"
		  port {
			container_port = 80
		  }
		}
	}


}

resource "kubernetes_deployment" "nginx" {
  metadata {
    name = "scalable-nginx-example"
    labels = {
      App = "ScalableNginxExample"
    }
  }

  spec {
    replicas = 6
    selector {
      match_labels = {
        App = "ScalableNginxExample"
      }
    }
    template {
      metadata {
        labels = {
          App = "ScalableNginxExample"
        }
      }
      spec {
        container {
          image = "nginx:1.7.8"
          name  = "example"

          port {
            container_port = 80
          }

        }
      }
    }
  }
}

resource "kubernetes_service" "nginx" {
  metadata {
    name = "nginx-example"
  }
  spec {
    selector = {
      App = "ScalableNginxExample"
    }
    port {
      port        = 80
      target_port = 80
    }

    #type = "ClusterIP"
    type = "LoadBalancer"
  }
}


