saravanans@skillsasap-vm24:~$ mkdir tf_sensitive_demo
saravanans@skillsasap-vm24:~$ cd tf_sensitive_demo
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ ls
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ nano main.tf
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ cat main.tf
resource "random_string" "data10" {
   length = "14"
}

resource "random_password" "password" {
  length           = 16
  special          = true
}

saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/random...
- Installing hashicorp/random v3.5.1...
- Installed hashicorp/random v3.5.1 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform apply

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # random_password.password will be created
  + resource "random_password" "password" {
      + bcrypt_hash = (sensitive value)
      + id          = (known after apply)
      + length      = 16
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (sensitive value)
      + special     = true
      + upper       = true
    }

  # random_string.data10 will be created
  + resource "random_string" "data10" {
      + id          = (known after apply)
      + length      = 14
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (known after apply)
      + special     = true
      + upper       = true
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_password.password: Creating...
random_string.data10: Creating...
random_string.data10: Creation complete after 0s [id=BJKa-q*F1Xq3W2]
random_password.password: Creation complete after 0s [id=none]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
saravanans@skillsasap-vm24:~/tf_sensitive_demo$
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ nano outputs.tf
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ cat outputs.tf
output "r1" {
  value = random_string.data10.result
}
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform apply
random_string.data10: Refreshing state... [id=BJKa-q*F1Xq3W2]
random_password.password: Refreshing state... [id=none]

Changes to Outputs:
  + r1 = "BJKa-q*F1Xq3W2"

You can apply this plan to save these new output values to the Terraform state,
without changing any real infrastructure.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes


Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

r1 = "BJKa-q*F1Xq3W2"
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ nano outputs.tf
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ cat outputs.tf
output "r1" {
  value = random_string.data10.result
}

output "r2" {
  value = random_password.password.result
}

saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform apply
random_string.data10: Refreshing state... [id=BJKa-q*F1Xq3W2]
random_password.password: Refreshing state... [id=none]

Planning failed. Terraform encountered an error while generating this plan.

╷
│ Error: Output refers to sensitive values
│
│   on outputs.tf line 5:
│    5: output "r2" {
│
│ To reduce the risk of accidentally exporting sensitive data that was intended to
│ be only internal, Terraform requires that any root module output containing
│ sensitive data be explicitly marked as sensitive, to confirm your intent.
│
│ If you do intend to export this data, annotate the output value as sensitive by
│ adding the following argument:
│     sensitive = true
╵
saravanans@skillsasap-vm24:~/tf_sensitive_demo$
saravanans@skillsasap-vm24:~/tf_sensitive_demo$
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ nano main.tf
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ nano outputs.tf
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ cat outputs.tf
output "r1" {
  value = random_string.data10.result
}

output "r2" {

  value = random_password.password.result
  sensitive = true
}

saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform apply
random_string.data10: Refreshing state... [id=BJKa-q*F1Xq3W2]
random_password.password: Refreshing state... [id=none]

Changes to Outputs:
  + r2 = (sensitive value)

You can apply this plan to save these new output values to the Terraform state,
without changing any real infrastructure.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes


Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

r1 = "BJKa-q*F1Xq3W2"
r2 = <sensitive>
saravanans@skillsasap-vm24:~/tf_sensitive_demo$
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform output
r1 = "BJKa-q*F1Xq3W2"
r2 = <sensitive>
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform output r1
"BJKa-q*F1Xq3W2"
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform output r2
"%hA6#xGlB>)+Zd:)"
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform output-raw  r2
Terraform has no command named "output-raw".

To see all of Terraform's top-level commands, run:
  terraform -help

saravanans@skillsasap-vm24:~/tf_sensitive_demo$ terraform output -raw  r2
%hA6#xGlB>)+Zd:)saravanans@skillsasap-vm24:~/tf_sensitive_demo$
saravanans@skillsasap-vm24:~/tf_sensitive_demo$
saravanans@skillsasap-vm24:~/tf_sensitive_demo$
saravanans@skillsasap-vm24:~/tf_sensitive_demo$
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ ls
main.tf  outputs.tf  terraform.tfstate  terraform.tfstate.backup
saravanans@skillsasap-vm24:~/tf_sensitive_demo$ ls terraform.tfstate
terraform.tfstate



